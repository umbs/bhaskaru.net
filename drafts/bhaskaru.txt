** Bhaskar Upadhyayula's Personal Site (http://bhaskaru.net/)
------------------------------------------------------------


** Error Explained – ‘E568: duplicate cscope database not added’ (http://bhaskaru.net/2014/10/error-explained-e568-duplicate-cscope-database-not-added/)
------------------------------------------------------------
10/30/14 /
TLDR:
$ vim sample.txt
line   45:
E568: duplicate cscope database not added
Press ENTER or type command to continue
Fix:
Add ‘set nocscopeverbose‘ to .vimrc
Detailed:

My primary editor for writing code is Vim (http://www.vim.org/) combined with couple of plugins. The cscope_maps.vim (http://cscope.sourceforge.net/cscope_maps.vim) plugin is immensely helpful in code navigation. However, there is an issue with that plugin, particularly in this part of the code.
40    " add any cscope database in current directory
41    if filereadable("cscope.out")
42        cs add cscope.out
43    " else add the database pointed to by environment variable
44    elseif $CSCOPE_DB != ""
45        cs add $CSCOPE_DB
46    endif
47
48    " show msg when any other cscope db added
49    set cscopeverbose

To use that plugin, one has to build cscope database on codebase, details of which are given here (http://cscope.sourceforge.net/cscope_vim_tutorial.html) . Imagine if your codebase is like this:
$ project1/a/b/c
$ project2/x/y/z
You have created a cscope database in the root directory of each project.
Vim has to be configured to recursively look for cscope database up the directory until the root of project1. I think out-of-the-box Vim comes with this support (not sure). If $CSCOPE_DB is defined and points else where (say cscope database within project2), the search gets messed up even further.
Opening a file in Vim would then throw following (or similar looking) errors.
$ vim sample.txt
line   45:
E568: duplicate cscope database not added
Press ENTER or type command to continue
Above error means that Vim is compiled with a cscope module and adding another cscope database (line 45) is akin to opening a second database (duplicate). Vim complains. But it is like a warning. You can check what is the first cscope database added/connected using ‘:cscope show‘ command.
Easiest fix is to suppress the warnings. Change line 49 to ‘set nocscopeverbose‘ or add it in .vimrc file (latter worked for me).

Note to Self: Did I just rehash contents of below blog? Sort of, for a different plugin.

Reference:
[1] https://blogs.oracle.com/natarajan/entry/avoiding_duplicate_cscope_database_error
[2] http://vim.1045645.n5.nabble.com/search-upward-of-cscope-out-file-td1160687.html
https://twitter.com/share


** Endianness – My notes (http://bhaskaru.net/2014/05/endianness-my-notes/)
------------------------------------------------------------
05/19/14 /
My notes on Endianness.

Consider four byte number: 0x0a0b0c0d; left being smallest memory address and right being highest.
Number: 0x0a0b0c0d. Here LSB is 0x0d and MSB is 0x0a
Memory Address: 0x100    0x101    0x102    0x103
+--------+--------+--------+--------+
|        |        |        |        |
+--------+--------+--------+--------+

Little-Endian: In LE, LSB is in lowest memory and MSB in highest memory address. So, the number is stored as: 0x0d0c0b0a in memory.
Ex: Intel x86
Number: 0x0a0b0c0d. Here LSB is 0x0d and MSB is 0x0a
Memory Address: 0x100    0x101    0x102    0x103
+--------+--------+--------+--------+
|  0x0d  |  0x0c  |  0x0b  |  0x0a  |
+--------+--------+--------+--------+
code:
int i = 0x0a0b0c0d;
char *c = (char *) &i;
printf ("0x%xn", *c);
// Output is 0xd = little-endian.

Big-Endian (aka Network Byte Order): In BE, MSB is in lowest memory address and LSB in highest. It looks the way numbers are written down on paper. So, the number is stored as: 0x0a0b0c0d in memory.
Ex: Motorola 68k, Data transfer on networks use NBO,
Number: 0x0a0b0c0d.
Memory Address: 0x100    0x101    0x102    0x103
+--------+--------+--------+--------+
|  0x0a  |  0x0b  |  0x0c  |  0x0d  |
+--------+--------+--------+--------+
code:
int i = 0x0a0b0c0d;
char *c = (char *) &i;
printf ("0x%xn", *c);
// Output is 0xa = big-endian.

Host-Byte Order: Ordering on the host machine. If processor is x86, its little-endian, if its Motorola’s 68k, its big-endian.

Mixed-Endian (or Middle-Endian): Ordering of bytes within 16-bit word may differ from ordering of 16-bit words within 32-bit word.

Bi-Endian: Architectures allowing switchable endianness in data segment, code segment or both. ‘Bi-Endian’ refers how processor accesses data. Instruction access (fetching instruction words) is usually fixed endian. Intel’s Itanium CPU allows bi-endian data and instruction access.
Ex: ARM version 3 and above, PowerPC,

Reference:
[1] http://en.wikipedia.org/wiki/Endianness
https://twitter.com/share


** Building Linux Kernel (Notes) (http://bhaskaru.net/2014/03/building-linux-kernel-notes/)
------------------------------------------------------------
03/10/14 /
These are my notes of Linux Device Drivers (http://course.ucsc-extension.edu/modules/shop/index.html?action=courseBrowse&CatalogID=88) class at UCSC Extension (http://www.ucsc-extension.edu/) . This could be incomplete and can contain errors. Please do your due diligence.

tldr; Steps to build linux kernel
1. Download latest stable source from here (http://www.kernel.org/) .
2. cd /usr/src
3. rm -rf linux
4. tar Jxvf linux-.tar.xz   /* note the .xz extension */
5. ln -sf linux- linux
6. cp /boot/.config .
7. make oldconfig
8. make
9. make modules_install
10. make install
11. reboot     /* choose kernel during bootup */

Steps 1 to 5 are obvious.

Run make help to get a quick overview of each make options.

Step 6: One way to compile a kernel is to work off of a config file. An instance of it can be got from /boot directory, which makes us use the next command make oldconfig.

Step 7: make oldconfig takes an existing config and asks input from users for each configuration option finally resulting in new .config file. Old config file will be saved in .config.old. Another option (GUI) is to run make xconfig

Step 8: Using the new .config file, compile the kernel.

Step 9: Install modules using this command. I noticed that this command is redundant on my system (built 3.13.0 kernel on Ubuntu 12.0.4).

Step 10: make install

Step 11: reboot the machine and at boot up time, we should get an option to choose which kernel to boot in to.
https://twitter.com/share


** Mac OS X Key Symbols & Shortcuts (http://bhaskaru.net/2013/04/mac-os-x-key-symbols-shortcuts/)
------------------------------------------------------------
04/08/13 / (http://bhaskaru.net/2013/04/mac-os-x-key-symbols-shortcuts/) Bhaskar / (http://bhaskaru.net/author/umbssarma/) Leave a comment (http://bhaskaru.net/2013/04/mac-os-x-key-symbols-shortcuts/#respond)  / keyboard shortcuts (http://bhaskaru.net/category/keyboard-shortcuts/) , symbols (http://bhaskaru.net/category/symbols/) , Mac OS X (http://bhaskaru.net/category/mac-os-x/)
Collection of links with more details about keyboard shortcuts and symbols. This is mainly for my reference at a later date. Google results are here (https://www.google.com/search?q=mac+os+x+key+symbols&aq=f&oq=mac+os+x+key+symbols&aqs=chrome.0.57j0l2j62l3.8744j0&sourceid=chrome&ie=UTF-8)

[1] From Apple (http://support.apple.com/kb/HT1343?viewlocale=en_US&locale=en_US)
[2] Heck, there is a website (http://www.osxkeyboardshortcuts.com/keyboard-symbols.html) dedicated for this
[3] Very clean graphical (http://www.danrodney.com/mac/) presentation
[4] Printable (http://macmost.com/downloads/MacMostKeyboardShortcutsLion.pdf) version

